<project name="jar-services-blank" default="package" xmlns:ivy="antlib:org.apache.ivy.ant">

	<property environment="env" />
	<property name="src.dir" value="src/main/java" />
	<property name="lib.dir" value="${basedir}/lib" />
	<property name="build.dir" value="build" />
	<property name="dist.dir" value="dist" />
	<property name="testsrc.dir" value="src/test/java" />
	<property name="reports.dir" value="reports" />
	<property name="jar.file.name" value="${ant.project.name}.jar" />
	<condition property="ivy-cache.dir" value="${user.home}/.ivycache" else="${basedir}/../ivycache">
		<!-- Detect Hudson -->
		<isset property="env.WORKSPACE" />
	</condition>
	<property name="ivy.jar.file" value="${ivy-cache.dir}/ivy.jar" />
	<property name="ivy.default.ivy.user.dir" value="${ivy-cache.dir}" />
	<available property="ivy.installed" file="${ivy.jar.file}" />

	<path id="lib.classpath">
		<fileset dir="${lib.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<target name="download-ivy" unless="ivy.installed">
		<mkdir dir="${ivy-cache.dir}" />
		<!-- download Ivy from web site so that it can be used even without any special installation -->
		<echo message="installing ivy..." />
		<property name="ivy.install.version" value="2.2.0" />
		<get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" dest="${ivy.jar.file}" usetimestamp="true" />
	</target>

	<target name="install-ivy" depends="download-ivy" description="--> install ivy">
		<path id="ivy.lib.path">
			<fileset dir="${ivy-cache.dir}" includes="*.jar" />
		</path>
		<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path" />
	</target>

	<target name="package" depends="clean, resolve, compile" description="--> resolve dependencies, compile and run the project">
		<copy toDir="${build.dir}/classes">
			<fileset dir="${basedir}/src/main/resources">
				<include name="**/*.xml" />
			</fileset>
		</copy>

		<antcall target="instrument" />
		<antcall target="test" />
		<antcall target="coverage-report" />

		<jar destfile="${dist.dir}/${jar.file.name}">
			<fileset dir="${build.dir}/classes" />
		</jar>

		<ivy:publish artifactspattern="${dist.dir}/[artifact].[ext]" resolver="local" pubrevision="1.0" status="integration" forcedeliver="true" overwrite="true" />
		<echo message="project ${ant.project.name} published locally with version 1.0" />
	</target>

	<target name="deploy" depends="package" description="deploy web application">
		<copy toDir="C:\temp" file="${dist.dir}/${jar.file.name}" />
	</target>

	<target name="resolve" depends="install-ivy">
		<ivy:resolve />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" type="jar,bundle" sync="true" />
	</target>

	<target name="clean" description="--> clean the project">
		<delete includeemptydirs="true" quiet="true">
			<fileset dir="${dist.dir}" />
			<fileset dir="${build.dir}" />
			<fileset dir="${lib.dir}" />
			<fileset dir="${reports.dir}" />
		</delete>
	</target>

	<target name="clean-ivy-cache" depends="install-ivy" description="--> clean the ivy cache">
		<ivy:cleancache />
	</target>

	<target name="compile">
		<mkdir dir="${build.dir}" />
		<mkdir dir="${build.dir}/classes" />
		<mkdir dir="${build.dir}/testclasses" />

		<javac debug="on" fork="true" destdir="${build.dir}/classes" srcdir="${src.dir}" classpathref="lib.classpath" includeantruntime="false">
		</javac>

		<javac debug="on" fork="true" destdir="${build.dir}/testclasses" srcdir="${testsrc.dir}" includeantruntime="false">
			<classpath>
				<path refid="lib.classpath" />
				<pathelement location="${build.dir}/classes" />
			</classpath>
		</javac>
	</target>


	<target name="instrument" unless="${skip.instrumentation}">
		<taskdef classpathref="lib.classpath" resource="tasks.properties" />

		<cobertura-instrument todir="${build.dir}/instrumented-classes" datafile="${reports.dir}/cobertura.ser">
			<fileset dir="${build.dir}/classes">
				<include name="**/*.class" />
			</fileset>
		</cobertura-instrument>
	</target>

	<target name="coverage-report" unless="${skip.instrumentation}">
		<taskdef classpathref="lib.classpath" resource="tasks.properties" />

		<cobertura-report format="html" destdir="${reports.dir}/cobertura" srcdir="${src.dir}" datafile="${reports.dir}/cobertura.ser" />
		<cobertura-report format="xml" destdir="${reports.dir}/cobertura" srcdir="${src.dir}" datafile="${reports.dir}/cobertura.ser" />
	</target>

	<target name="test">
		<mkdir dir="${reports.dir}/junit" />
		<junit printsummary="yes" haltonfailure="yes" fork="yes">
			<classpath>
				<pathelement location="${build.dir}/instrumented-classes" />
				<pathelement location="${build.dir}/classes" />
				<pathelement location="${build.dir}/testclasses" />
				<path refid="lib.classpath" />
			</classpath>

			<sysproperty key="net.sourceforge.cobertura.datafile" file="${reports.dir}/cobertura.ser" />

			<formatter type="xml" />

			<batchtest fork="yes" todir="${reports.dir}/junit">
				<fileset dir="${testsrc.dir}">
					<include name="**/*Test.java" />
					<exclude name="**/*AbstractTest.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>
</project>
